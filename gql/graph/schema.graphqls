# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type User {
  id: ID!
  name: String!
}

type Issue {
  id: ID!
  title: String!
  desc: String!
  author: User!
  contributerNames: [String!]!
  comments: [Comment!]!
  branches: [Branch!]!
  analysis: [Analysis!]!
  decidedBranch: ID!
  createdAt: Time!
  lastModifiedAt: Time!
}

type IssueSummary {
  id: ID!
  title: String!
  desc: String!
  authorName: String!
  contributerCount: Int!
  decidedBranchTitle: String!
  analysisCount: Int!
  createdAt: Time!
  lastModifiedAt: Time!
}

type Comment {
  id: ID!
  parentID: ID!
  authorId: ID!
  content: String!
  createdAt: Time!
  lastModifiedAt: Time!
}

type Branch {
  id: ID!
  issueId: ID!
  title: String!
  createdAt: Time!
  lastModifiedAt: Time!
}

type Analysis {
  id: ID!
  issueId: ID!
}

type Query {
  issues(userId: ID!): [IssueSummary!]!
  issue(id: ID!): Issue!
  user(userId: ID!): User!
}

input IssueInput {
  title: String!
  desc: String
  userId: ID!
  branches: [String!]
}

input NewIssueComment {
  userId: ID!
  issueId: ID!
  content: String!
}

input NewAnalsysComment {
  userId: ID!
  issueId: ID!
  analysisId: ID!
  content: String!
}

input PutComment {
  id: ID!
  userId: String!
  content: String!
}

input UserInput {
  name: String!
}

type Mutation {
  createIssue(user_id: ID!, input: IssueInput!): Issue!
  updateIssue(issue_id: ID!, input: IssueInput!): Issue!
  createIssueComment(input: NewIssueComment): Comment!
  createUser(input: UserInput!): User!
  updateUser(user_id: ID!, input: UserInput!): User!
}
