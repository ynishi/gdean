// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyzeServiceClient is the client API for AnalyzeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyzeServiceClient interface {
	GetMeta(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error)
	CreateMeta(ctx context.Context, in *CreateMetaRequest, opts ...grpc.CallOption) (*CreateMetaResponse, error)
	PutMeta(ctx context.Context, in *PutMetaRequest, opts ...grpc.CallOption) (*PutMetaResponse, error)
	DeleteMeta(ctx context.Context, in *DeleteMetaRequest, opts ...grpc.CallOption) (*DeleteMetaResponse, error)
	GetMetaList(ctx context.Context, in *GetMetaListRequest, opts ...grpc.CallOption) (*GetMetaListResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	MaxEmv(ctx context.Context, in *MaxEmvRequest, opts ...grpc.CallOption) (*MaxEmvResponse, error)
}

type analyzeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzeServiceClient(cc grpc.ClientConnInterface) AnalyzeServiceClient {
	return &analyzeServiceClient{cc}
}

func (c *analyzeServiceClient) GetMeta(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzeServiceClient) CreateMeta(ctx context.Context, in *CreateMetaRequest, opts ...grpc.CallOption) (*CreateMetaResponse, error) {
	out := new(CreateMetaResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/CreateMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzeServiceClient) PutMeta(ctx context.Context, in *PutMetaRequest, opts ...grpc.CallOption) (*PutMetaResponse, error) {
	out := new(PutMetaResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/PutMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzeServiceClient) DeleteMeta(ctx context.Context, in *DeleteMetaRequest, opts ...grpc.CallOption) (*DeleteMetaResponse, error) {
	out := new(DeleteMetaResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/DeleteMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzeServiceClient) GetMetaList(ctx context.Context, in *GetMetaListRequest, opts ...grpc.CallOption) (*GetMetaListResponse, error) {
	out := new(GetMetaListResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/GetMetaList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzeServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzeServiceClient) MaxEmv(ctx context.Context, in *MaxEmvRequest, opts ...grpc.CallOption) (*MaxEmvResponse, error) {
	out := new(MaxEmvResponse)
	err := c.cc.Invoke(ctx, "/gdean.v1.AnalyzeService/MaxEmv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyzeServiceServer is the server API for AnalyzeService service.
// All implementations must embed UnimplementedAnalyzeServiceServer
// for forward compatibility
type AnalyzeServiceServer interface {
	GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
	CreateMeta(context.Context, *CreateMetaRequest) (*CreateMetaResponse, error)
	PutMeta(context.Context, *PutMetaRequest) (*PutMetaResponse, error)
	DeleteMeta(context.Context, *DeleteMetaRequest) (*DeleteMetaResponse, error)
	GetMetaList(context.Context, *GetMetaListRequest) (*GetMetaListResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	MaxEmv(context.Context, *MaxEmvRequest) (*MaxEmvResponse, error)
	mustEmbedUnimplementedAnalyzeServiceServer()
}

// UnimplementedAnalyzeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyzeServiceServer struct {
}

func (UnimplementedAnalyzeServiceServer) GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedAnalyzeServiceServer) CreateMeta(context.Context, *CreateMetaRequest) (*CreateMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeta not implemented")
}
func (UnimplementedAnalyzeServiceServer) PutMeta(context.Context, *PutMetaRequest) (*PutMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMeta not implemented")
}
func (UnimplementedAnalyzeServiceServer) DeleteMeta(context.Context, *DeleteMetaRequest) (*DeleteMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeta not implemented")
}
func (UnimplementedAnalyzeServiceServer) GetMetaList(context.Context, *GetMetaListRequest) (*GetMetaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaList not implemented")
}
func (UnimplementedAnalyzeServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedAnalyzeServiceServer) MaxEmv(context.Context, *MaxEmvRequest) (*MaxEmvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxEmv not implemented")
}
func (UnimplementedAnalyzeServiceServer) mustEmbedUnimplementedAnalyzeServiceServer() {}

// UnsafeAnalyzeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzeServiceServer will
// result in compilation errors.
type UnsafeAnalyzeServiceServer interface {
	mustEmbedUnimplementedAnalyzeServiceServer()
}

func RegisterAnalyzeServiceServer(s grpc.ServiceRegistrar, srv AnalyzeServiceServer) {
	s.RegisterService(&AnalyzeService_ServiceDesc, srv)
}

func _AnalyzeService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).GetMeta(ctx, req.(*GetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzeService_CreateMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).CreateMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/CreateMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).CreateMeta(ctx, req.(*CreateMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzeService_PutMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).PutMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/PutMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).PutMeta(ctx, req.(*PutMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzeService_DeleteMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).DeleteMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/DeleteMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).DeleteMeta(ctx, req.(*DeleteMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzeService_GetMetaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).GetMetaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/GetMetaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).GetMetaList(ctx, req.(*GetMetaListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzeService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzeService_MaxEmv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxEmvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).MaxEmv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdean.v1.AnalyzeService/MaxEmv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).MaxEmv(ctx, req.(*MaxEmvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyzeService_ServiceDesc is the grpc.ServiceDesc for AnalyzeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyzeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gdean.v1.AnalyzeService",
	HandlerType: (*AnalyzeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeta",
			Handler:    _AnalyzeService_GetMeta_Handler,
		},
		{
			MethodName: "CreateMeta",
			Handler:    _AnalyzeService_CreateMeta_Handler,
		},
		{
			MethodName: "PutMeta",
			Handler:    _AnalyzeService_PutMeta_Handler,
		},
		{
			MethodName: "DeleteMeta",
			Handler:    _AnalyzeService_DeleteMeta_Handler,
		},
		{
			MethodName: "GetMetaList",
			Handler:    _AnalyzeService_GetMetaList_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _AnalyzeService_GetMetrics_Handler,
		},
		{
			MethodName: "MaxEmv",
			Handler:    _AnalyzeService_MaxEmv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/gdeananalyze.proto",
}
